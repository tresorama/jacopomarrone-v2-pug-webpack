const IconsMap = [
  [
    '[data-icon="close"]',
    `<svg class="svg-icon" viewBox="0 0 20 20" transform="rotate(45deg)">
    <path fill="none" d="M11.469,10l7.08-7.08c0.406-0.406,0.406-1.064,0-1.469c-0.406-0.406-1.063-0.406-1.469,0L10,8.53l-7.081-7.08
    c-0.406-0.406-1.064-0.406-1.469,0c-0.406,0.406-0.406,1.063,0,1.469L8.531,10L1.45,17.081c-0.406,0.406-0.406,1.064,0,1.469
    c0.203,0.203,0.469,0.304,0.735,0.304c0.266,0,0.531-0.101,0.735-0.304L10,11.469l7.08,7.081c0.203,0.203,0.469,0.304,0.735,0.304
    c0.267,0,0.532-0.101,0.735-0.304c0.406-0.406,0.406-1.064,0-1.469L11.469,10z"></path>
  </svg>`
  ],
  [
    '[data-icon="arrow-left"], [data-icon="back"]',
    `<svg class="svg-icon" viewBox="0 0 20 20">
      <path fill="none" d="M8.388,10.049l4.76-4.873c0.303-0.31,0.297-0.804-0.012-1.105c-0.309-0.304-0.803-0.293-1.105,0.012L6.726,9.516c-0.303,0.31-0.296,0.805,0.012,1.105l5.433,5.307c0.152,0.148,0.35,0.223,0.547,0.223c0.203,0,0.406-0.08,0.559-0.236c0.303-0.309,0.295-0.803-0.012-1.104L8.388,10.049z"></path>
    </svg>`
  ],
  [
    '[data-icon="arrow-right"], [data-icon="forward"]',
    `<svg class="svg-icon" viewBox="0 0 20 20">
    <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
  </svg>`
  ],
];

export default class Icons {
  constructor() {
    // Inject a stylesheet
    this.inject_stylesheet();

    // inject icons one time
    this.inject_all_icons();

    // if something changes in the DOM, inject icons again
    this.mutation_observer = new MutationObserver(this.mutation_observer_callback.bind(this));
    this.mutation_observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      characterData: true,
    });


  }
  inject_stylesheet() {
    const node_stylesheet = document.createElement('style');
    node_stylesheet.innerHTML = `
    .svg-icon {
      width: 1em;
      height: 1em;
      stroke: currentColor;
      fill: currentColor;
      stroke-opacity: 0;
      fill-opacity: 1;
      vertical-align: middle;
    }
    
    .svg-icon path,
    .svg-icon polygon,
    .svg-icon rect {
      fill: inherit;
    }
    
    .svg-icon circle {
      stroke: inherit;
      stroke-width: 1;
    }
    `;
    document.body.append(node_stylesheet);

  }
  inject_all_icons() {
    IconsMap.forEach(([selector, htmlContent]) => {
      document.querySelectorAll(selector).forEach(element => {
        if (element.hasAttribute('data-icon-is-injected')) return;
        element.setAttribute('data-icon-is-injected', '1'); // this attribute let us know that the icon is already injected in future
        element.innerHTML = htmlContent;
      }
      );
    })
  }
  mutation_observer_callback(mutationsList, observer) {

    // Loop through all mutations.
    // Ignore mutation generated by a previous icon injection.
    // If , excluded these, ther is at least one mutation, re inject all icons
    for (const mutation of mutationsList) {

      if (mutation.type === 'childList') {
        // console.log('A child node has been added or removed.');
        if (mutation.target.hasAttribute('data-icon-is-injected')) {
          continue;
        }
      }
      else if (mutation.type === 'attributes') {
        // console.log('The ' + mutation.attributeName + ' attribute was modified.');
        continue;
      }

      // something is changed inthe DOM, and the change is not from icons injection
      this.inject_all_icons();
      return;

    }


  }

}
