const ShapesMap = [
  [
    '[data-shape-divider="arrow-down"]',
    `<svg
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 10 1" 
      preserveAspectRatio="none"
    >
      <path d="M0 0h10L5 1z"/>
    </svg>`
  ],
];

export default class ShapeDividers {
  constructor() {

    // Inject a stylesheet
    this.inject_stylesheet();

    // inject shapes one time
    this.inject_all_shapes();

    // if something changes in the DOM, inject shapes again
    this.mutation_observer = new MutationObserver(this.mutation_observer_callback.bind(this));
    this.mutation_observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      characterData: true,
    });


  }
  inject_stylesheet() {
    const node_stylesheet = document.createElement('style');
    node_stylesheet.innerHTML = ``;
    document.body.append(node_stylesheet);
  }
  inject_all_shapes() {
    ShapesMap.forEach(([selector, htmlContent]) => {
      document.querySelectorAll(selector).forEach(element => {
        if (element.hasAttribute('data-shape-is-injected')) return;
        element.setAttribute('data-shape-is-injected', '1'); // this attribute let us know that the shape is already injected in future
        element.innerHTML = htmlContent;
      }
      );
    })
  }
  mutation_observer_callback(mutationsList, observer) {

    // Loop through all mutations.
    // Ignore mutation generated by a previous shape injection.
    // If , excluded these, ther is at least one mutation, re inject all shapes
    for (const mutation of mutationsList) {

      if (mutation.type === 'childList') {
        // console.log('A child node has been added or removed.');
        if (mutation.target.hasAttribute('data-shape-is-injected')) {
          continue;
        }
      }
      else if (mutation.type === 'attributes') {
        // console.log('The ' + mutation.attributeName + ' attribute was modified.');
        continue;
      }

      // something is changed inthe DOM, and the change is not from shapes injection
      this.inject_all_shapes();
      return;

    }


  }

}
